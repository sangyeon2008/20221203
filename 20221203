#피보나치 수열
# def fibo(n):
#     if n==1:
#         return 0
#     if n==2:
#         return 1
#     else:
#         return fibo(n-1)+fibo(n-2)
#
#
# print(fibo(5))  #출력값: 3



#제귀함수
# def solution(s):
#     if s==1:
#         return 1
#     else:
#         return solution(s-1)*2+1
# print(solution(4))



# fib = [] #리스트의 index번째에는 피보나치수열 f(index)의 값이 들어갈 것이다.
# n= int(input())
# for i in range(n+1):
#     fib.append(0)
# fib[1] = 1
# print(fib)
# for  i in range(2,n+1):
#     fib[i]  = fib[i-1] + fib[i-2]
#     print(fib)




#재귀의 귀재
# T= int(input())
# o=0
# def recursion(s, l, r, o):
#     o += 1
#     if l >= r: return 1,o
#     elif s[l] != s[r]: return 0,o
#     else: return recursion(s, l+1, r-1, o)
#
#
# def isPalindrome(s):
#     return recursion(s, 0, len(s)-1, o)
#
# for _ in range(T):
#     s = input()
#     answer = isPalindrome(s)
#     print(answer[0],answer[1])





#이진변환 반복하기
#70129
def solution(s):
    return recursion(s)

def recursion(s):
    if s=='1':
        return [recusion함수의 호출횟수, '0'을 제거한 횟수]
    return 제귀

s= "1100101001"
print(solution(s))
